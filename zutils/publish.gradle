Properties properties = new Properties()
DataInputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load(inputStream)

def mavenRepo=properties.getProperty('mavenRepo')

def userName=properties.getProperty('userName')
def userKey=properties.getProperty('userKey')
def userRepo=properties.getProperty('userRepo')
def fileType=properties.getProperty('fileType')
def siteUrl=properties.getProperty('siteUrl')
def gitUrl=properties.getProperty('gitUrl')
def groupDesc=properties.getProperty('plugDesc')
def plugId=properties.getProperty('plugId')
def groupName=properties.getProperty('plugName')
def groupVersion=properties.getProperty('plugVersion')

ext {
    bintrayRepo = 'maven'
    bintrayName = 'zutils'

    publishedGroupId = 'com.kayo.utils'
    libraryName = 'zutils'
    artifact = 'zutils'

    libraryDescription = 'A Utils for Android'

    siteUrl = 'https://github.com/kayoSun/KayoLibs'
    gitUrl = 'https://github.com/kayoSun/KayoLibs.git'

    libraryVersion = '1.0.0'

    developerId = 'kayosun'
    developerName = 'kayosun'
    developerEmail = ''

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

apply plugin: 'com.github.dcendents.android-maven'

group = 'com.kayo.utils'                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

//
//apply plugin: 'maven-publish'
//apply plugin: 'com.jfrog.bintray'
//
//publishing {
//    publications {
//        Production(MavenPublication) {
////            artifact("$buildDir/outputs/aar/app-release.aar")
//            groupId plugId
//            artifactId groupName
//            version groupVersion
//
//            pom.withXml {
//                def dependenciesNode = asNode().appendNode('dependencies')
//
//                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
//                configurations.implementation.allDependencies.each {
//                    // Ensure dependencies such as fileTree are not included in the pom.
//                    if (it.name != 'unspecified') {
//                        def dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', groupId)
//                        dependencyNode.appendNode('artifactId', groupName)
//                        dependencyNode.appendNode('version', groupVersion)
//                    }
//                }
//            }
//        }
//    }
//}
//
//bintray {
//    user = userName
//    key = userKey
//    publications = ['Production']
//    configurations = ['archives']
//    override = true
//    pkg {
//        repo = userRepo
//        name = groupName
//        description = groupDesc
//        publish = true
//        publicDownloadNumbers = true
//        licenses = ['Apache-2.0']
//        vcsUrl = siteUrl
//        dryRun = true
//        version {
//            name = groupVersion
//            desc = groupDesc
//            released = new Date()
//            vcsTag = groupVersion
//        }
//    }
//}